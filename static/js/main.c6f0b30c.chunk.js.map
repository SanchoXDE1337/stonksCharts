{"version":3,"sources":["layout/styles.module.scss","store/actions/actions.ts","store/fetchData.ts","layout/App.tsx","store/reducers/reducers.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["module","exports","fetchDataSuccess","historyData","dailyData","type","fetchData","dispatch","a","historyDataAPI","dailyDataAPI","e","error","App","state","data","min","max","handleClick","props","value","target","rawData","Object","keys","reverse","slice","forEach","date","key","normalizedData","stateObject","price","push","_","maxBy","obj","parseInt","minBy","setState","parseFloat","this","className","styles","container","header","width","height","margin","right","left","dataKey","stroke","dot","strokeDasharray","domain","Math","floor","formatter","name","toUpperCase","labelFormatter","label","buttonSet","onClick","event","button","React","Component","connect","dataStore","bindActionCreators","fetchDataAction","initialState","dataReducer","payload","combineReducers","middlewares","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"4njCACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,OAAS,uBAAuB,UAAY,0BAA0B,OAAS,yB,2LCgB1HC,EAAmB,SAACC,EAAmBC,GAChD,MAAO,CACHC,KAlB0B,qBAmB1BD,YACAD,gB,kBCHOG,EAZG,WACd,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sDACH,IAGID,EAASL,EAFiBO,EACFC,IAE1B,MAAOC,GACLJ,EDaD,CACHF,KAzBwB,mBA0BxBO,MCf4BD,IANzB,2CAAP,mDAAM,I,iBC8BJE,E,2MACFC,MAAgB,CACZC,KAAM,GACNC,IAAK,EACLC,IAAK,G,EAGTC,Y,uCAAc,WAAOP,GAAP,mCAAAH,EAAA,wDACuB,EAAKW,MAA/BhB,EADG,EACHA,YAAaC,EADV,EACUA,UAGhBgB,EADM,OAANT,EACSA,EAAGU,OAA6BD,MAEjC,OANF,KASFA,EATE,OAUD,QAVC,OAcD,UAdC,OA2BD,SA3BC,+BAWFL,EAAOX,EAXL,mCAgBIkB,EAAgB,GACtBC,OAAOC,KAAKrB,GACPsB,UACAC,OAAO,IACPD,UACAE,SAAQ,SAACC,GACNN,EAAQM,GAAQzB,EAAYyB,MAEpCb,EAAOO,EAxBL,4CAgCFP,EAAOZ,EAhCL,6BAqCV,IAAW0B,KADLC,EAA8B,GAClBf,EACRgB,EAAc,CAChBH,KAAMC,EACNG,MAAOjB,EAAKc,GAAL,MAEXC,EAAeG,KAAKF,GAElBd,EAAMiB,IAAEC,MAAML,GAAgB,SAAAM,GAAG,OAAIC,SAASD,EAAIJ,UAClDhB,EAAMkB,IAAEI,MAAMR,GAAgB,SAAAM,GAAG,OAAIC,SAASD,EAAIJ,UACxD,EAAKO,SAAS,CAACxB,KAAMe,EAAeL,UAAWR,IAAKuB,WAAWvB,EAAKe,OAAQhB,IAAKwB,WAAWxB,EAAKgB,SA9CvF,4C,mQAkDJS,KAAKtB,MAAMb,Y,OACjBmC,KAAKvB,YAAY,M,qIAGX,IAAD,SACoBuB,KAAK3B,MAAvBC,EADF,EACEA,KAAMC,EADR,EACQA,IAAKC,EADb,EACaA,IAClB,OACI,yBAAKyB,UAAWC,IAAOC,WACnB,4BAAQF,UAAWC,IAAOE,QACtB,2CAEJ,kBAAC,IAAD,CAAqBC,MAAO,MAAOC,OAAQ,OACvC,kBAAC,IAAD,CAAWD,MAAO,IAAKC,OAAQ,IAAKhC,KAAMA,EAAMiC,OAAQ,CAACC,MAAO,GAAIC,MAAO,KACvE,kBAAC,IAAD,CAAM7C,KAAK,WAAW8C,QAAQ,QAAQC,OAAO,UAAUC,KAAK,IAC5D,kBAAC,IAAD,CAAeD,OAAO,OAAOE,gBAAgB,QAC7C,kBAAC,IAAD,CAAOH,QAAQ,SACf,kBAAC,IAAD,CAAOA,QAAQ,QAAQI,OAAQ,CAACC,KAAKC,MAAY,IAANzC,GAAa,IAAKwC,KAAKC,MAAY,IAANxC,GAAa,OACrF,kBAAC,IAAD,CACIyC,UAAW,SAACtC,EAAeuC,GAAhB,MAAiC,CAAC,GAAD,OACrCvC,EADqC,QAExCuC,EAAK,GAAGC,cAAgBD,EAAKjC,MAAM,KAEvCmC,eAAgB,SAACC,GAAD,sBAA4BA,QAIxD,yBAAKpB,UAAWC,IAAOoB,WACnB,4BAAQC,QAAS,SAAAC,GAAK,OAAI,EAAK/C,YAAY+C,IAAQ7C,MAAO,OAAQsB,UAAWC,IAAOuB,QAApF,UAGA,4BAAQF,QAAS,SAAAC,GAAK,OAAI,EAAK/C,YAAY+C,IAAQ7C,MAAO,QAASsB,UAAWC,IAAOuB,QAArF,WAGA,4BAAQF,QAAS,SAAAC,GAAK,OAAI,EAAK/C,YAAY+C,IAAQ7C,MAAO,MAAOsB,UAAWC,IAAOuB,QAAnF,e,GA1FFC,IAAMC,WAsGTC,eAHS,SAAC,GAAD,QAAEC,UAAF,MAAiD,CAACnE,YAAlD,EAAcA,YAAiDC,UAA/D,EAA2BA,cACxB,SAACG,GAAD,OAAwBgE,6BAAmB,CAACjE,UAAWkE,GAAkBjE,KAErF8D,CAA6CxD,G,6mBCzI5D,IAAM4D,EAAe,CACjBrE,UAAW,GACXD,YAAa,GACbS,MAAO,MAmBI8D,EAhBK,WAAwD,IAAvD5D,EAAsD,uDAA9C2D,EAA8C,yCAA/BpE,EAA+B,EAA/BA,KAASsE,EAAsB,wBACvE,OAAQtE,GACJ,IHT0B,qBGc1B,IHbwB,mBGcpB,OAAO,EAAP,GACOS,EADP,GAEO6D,GAEX,QACI,OAAO7D,IClBJ8D,4BAAgB,CAACN,cCI1BO,EAAc,CAACC,KAERC,EAAQC,sBAAYC,EAJZ,GAIuCC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCHnGO,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.c6f0b30c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3PxFh\",\"header\":\"styles_header__1lRtA\",\"buttonSet\":\"styles_buttonSet__2o3xU\",\"button\":\"styles_button__1pYIe\"};","import {IAPI} from '../../layout/App'\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS'\nexport const FETCH_DATA_ERROR = 'FETCH_DATA_ERROR'\n\nexport interface IAction {\n    type: string\n}\n\ninterface ISuccessAction extends IAction {\n    historyData: IAPI\n    dailyData: IAPI\n}\n\ninterface IErrorAction extends IAction {\n    error: any\n}\n\nexport const fetchDataSuccess = (historyData: IAPI, dailyData: IAPI): ISuccessAction => {\n    return {\n        type: FETCH_DATA_SUCCESS,\n        dailyData,\n        historyData,\n    }\n}\n\nexport const fetchDataError = (error: any): IErrorAction => {\n    return {\n        type: FETCH_DATA_ERROR,\n        error: error,\n    }\n}\n","import {fetchDataSuccess, fetchDataError} from './actions/actions'\nimport {Dispatch} from 'redux'\nimport historyDataAPI from '../API/historyData.json'\nimport dailyDataAPI from '../API/dailyData.json'\nimport {IAPI} from '../layout/App'\n\nconst fetchData = () => {\n    return async (dispatch: Dispatch) => {\n        try {\n            const historyData: IAPI = historyDataAPI\n            const dailyData: IAPI = dailyDataAPI\n            dispatch(fetchDataSuccess(historyData, dailyData))\n        } catch (e) {\n            dispatch(fetchDataError(e))\n        }\n    }\n}\n\nexport default fetchData\n","import React from 'react'\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts'\nimport _ from 'lodash'\nimport {connect} from 'react-redux'\nimport {bindActionCreators, Dispatch} from 'redux'\nimport fetchDataAction from '../store/fetchData'\nimport styles from './styles.module.scss'\n\nexport interface IAPI {\n    [date: string]: TDate\n}\n\ntype TDate = {\n    open: string\n    close: string\n    high: string\n    low: string\n    volume: string\n}\n\ninterface IState {\n    data: TDataItem[]\n    min: number\n    max: number\n}\n\ntype TDataItem = {\n    date: string\n    price: string\n}\n\ninterface IProps {\n    fetchData?: any\n    historyData?: any\n    dailyData?: any\n}\n\nclass App extends React.Component<IProps, IState> {\n    state: IState = {\n        data: [],\n        min: 0,\n        max: 0,\n    }\n\n    handleClick = async (e: React.MouseEvent | null) => {\n        const {historyData, dailyData} = this.props\n        let value: string\n        if (e !== null) {\n            value = (e!.target as HTMLButtonElement).value\n        } else {\n            value = 'year'\n        }\n        let data: IAPI\n        switch (value) {\n            case 'day': {\n                data = dailyData\n                break\n            }\n            case 'month': {\n                // 21 is average number of working days per month\n                const rawData: IAPI = {}\n                Object.keys(historyData)\n                    .reverse()\n                    .slice(-21)\n                    .reverse()\n                    .forEach((date: string) => {\n                        rawData[date] = historyData[date]\n                    })\n                data = rawData\n                break\n            }\n            case 'year': {\n                data = historyData\n                break\n            }\n            default: {\n                data = historyData\n                break\n            }\n        }\n        const normalizedData: TDataItem[] = []\n        for (const key in data) {\n            const stateObject = {\n                date: key,\n                price: data[key]['open'],\n            }\n            normalizedData.push(stateObject)\n        }\n        const max = _.maxBy(normalizedData, obj => parseInt(obj.price))\n        const min = _.minBy(normalizedData, obj => parseInt(obj.price))\n        this.setState({data: normalizedData.reverse(), max: parseFloat(max!.price), min: parseFloat(min!.price)})\n    }\n\n    async componentDidMount() {\n        await this.props.fetchData()\n        this.handleClick(null)\n    }\n\n    render() {\n        const {data, min, max} = this.state\n        return (\n            <div className={styles.container}>\n                <header className={styles.header}>\n                    <h2>NYSE: SNAP</h2>\n                </header>\n                <ResponsiveContainer width={'90%'} height={'70%'}>\n                    <LineChart width={800} height={500} data={data} margin={{right: 10, left: -10}}>\n                        <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n                        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis dataKey=\"price\" domain={[Math.floor(min * 100) / 100, Math.floor(max * 100) / 100]} />\n                        <Tooltip\n                            formatter={(value: number, name: string) => [\n                                `${value} USD`,\n                                name[0].toUpperCase() + name.slice(1),\n                            ]}\n                            labelFormatter={(label: string) => `Date: ${label}`}\n                        />\n                    </LineChart>\n                </ResponsiveContainer>\n                <div className={styles.buttonSet}>\n                    <button onClick={event => this.handleClick(event)} value={'year'} className={styles.button}>\n                        1 year\n                    </button>\n                    <button onClick={event => this.handleClick(event)} value={'month'} className={styles.button}>\n                        1 month\n                    </button>\n                    <button onClick={event => this.handleClick(event)} value={'day'} className={styles.button}>\n                        1 day\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({dataStore: {historyData, dailyData}}: any) => ({historyData, dailyData})\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({fetchData: fetchDataAction}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {FETCH_DATA_SUCCESS, FETCH_DATA_ERROR, IAction} from '../actions/actions'\n\nconst initialState = {\n    dailyData: [],\n    historyData: [],\n    error: null,\n}\n\nconst dataReducer = (state = initialState, {type, ...payload}: IAction) => {\n    switch (type) {\n        case FETCH_DATA_SUCCESS:\n            return {\n                ...state,\n                ...payload,\n            }\n        case FETCH_DATA_ERROR:\n            return {\n                ...state,\n                ...payload,\n            }\n        default:\n            return state\n    }\n}\nexport default dataReducer\n","import {combineReducers} from 'redux'\nimport dataStore from './reducers'\n\nexport default combineReducers({dataStore})\n","import {applyMiddleware, createStore} from 'redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {}\n\nconst middlewares = [thunk]\n\nexport const store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)))\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './layout/App'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}